


########################
# Development

## Use an official Python runtime as a parent image
FROM python:3.11-slim

## Set the working directory in the container to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . .

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Expose port 5000 to access the Flask app. (default port is 5000)
EXPOSE 5000

# Define environment variable
# - PYTHONDONTWRITEBYTECODE: prevents Python from writing pyc files to disc (equivalent to python -B option)
# - PYTHONUNBUFFERED: prevents Python from buffering stdout and stderr (equivalent to python -u option)
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV FLASK_APP hex_be
ENV FLASK_ENV=development

# if app is only accessible from within the container
ENV FLASK_RUN_HOST 0.0.0.0 

# for development
CMD ["flask", "run"]


# build docker image (with tag hexbe)
# docker build -t hexbe .

# run docker container (detached, map ports)
# docker run -d -p 5000:5000 hexbe

#check containers 
#docker ps

#stop container 
# docker stop <container_id_or_name>


# remove container
# docker rm <container_id_or_name>






########################
# Production 

## Use an official Python runtime as a parent image
# FROM python:3.11-slim

## Set the working directory in the container to /app
# WORKDIR /app


## Install OS dependencies (if any).
# RUN apt-get update && apt-get install -y --no-install-recommends <package-name>

## Copy the dependencies file to the working directory.
# COPY requirements.txt .

## Install any dependencies.
# RUN pip install --no-cache-dir -r requirements.txt

## Copy the current directory contents into the container at /app
# COPY . .

## Install any needed packages specified in requirements.txt
# RUN pip install --no-cache-dir -r requirements.txt

## Expose port 8000 to access the Flask app. (default port is 8000), in production. Since Gunicorn uses
# EXPOSE 8000

## Define environment variable
## - PYTHONDONTWRITEBYTECODE: prevents Python from writing pyc files to disc (equivalent to python -B option)
## - PYTHONUNBUFFERED: prevents Python from buffering stdout and stderr (equivalent to python -u option)
# ENV PYTHONDONTWRITEBYTECODE 1
# ENV PYTHONUNBUFFERED 1
# ENV FLASK_APP hex_be
# ENV FLASK_ENV=production

## for production
# CMD ["gunicorn", "-b", "0.0.0.0:8000", "hex_be:app"]


